A)Summary
package ques4;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Writable;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

public class Summary implements Writable {
	IntWritable requests;
	IntWritable downloadSize;

	Summary() {
		requests = new IntWritable();
		downloadSize = new IntWritable();
	}

	Summary(IntWritable requests, IntWritable downloadSize) {
		this.requests = requests;
		this.downloadSize = downloadSize;
	}

	public IntWritable getDownloadSize() {
		return downloadSize;
	}

	public void setDownloadSize(IntWritable downloadSize) {
		this.downloadSize = downloadSize;
	}

	public IntWritable getRequests() {
		return requests;
	}

	public void setRequests(IntWritable requests) {
		this.requests = requests;
	}

	@Override
	public void write(DataOutput dataOutput) throws IOException {
		requests.write(dataOutput);
		downloadSize.write(dataOutput);
	}

	@Override
	public void readFields(DataInput dataInput) throws IOException {
		requests.readFields(dataInput);
		downloadSize.readFields(dataInput);
	}

	@Override
	public String toString() {
		return requests + "," + downloadSize;
	}
}

B)Mapper
package ques4;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class mapper extends Mapper<LongWritable, Text, Text, Text> {

	@Override
	public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
		String line = value.toString();
		int start = line.indexOf('[');
		int stop = line.indexOf(']');
		String timeStr = line.substring(start + 1, stop - 1);
		String month = timeStr.substring(3, 6);
		String year = timeStr.substring(7, 11);
		String combined = month + "-" + year;

		Summary summary = new Summary();
		summary.setRequests(new IntWritable(1));
		int bytes = 0;
		if (line.contains("GET")) {
			String temp = "";
			String pattern = "HTTP/1.1\\\" \\d{3}\\ (\\d+)";
			Pattern r = Pattern.compile(pattern);
			Matcher m = r.matcher(line);

			if (!m.find()) {
				temp = "0";
			} else {
				temp = m.group(1);
			}
			bytes = Integer.parseInt(temp);

		}
		summary.setDownloadSize(new IntWritable(bytes));
		context.write(new Text(combined), new Text(summary.toString()));
	}
}

C)Output
Dec-2015	14148,236027479
Feb-2016	64262,1011731189
Jan-2016	28224,1581312747

D)package ques4;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class ques {

	public static void main(String[] args) throws Exception {

		if (args.length != 2) {
			System.err.println("System error 2304");
			System.exit(-1);
		}

		Job job = new Job();
		job.setJarByClass(RequestSummary.class);
		job.setJobName("Request Summary Counter");

		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));

		job.setMapperClass(mapper.class);
		job.setReducerClass(reducer.class);

		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);

		System.exit(job.waitForCompletion(true) ? 0 : 1);
	}

}

E)Reducer
package ques4;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;
import java.io.IOException;

public class reducer extends Reducer<Text, Text, Text, Text> {

	@Override
	public void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {

		int counter = 0;
		int downloadSize = 0;
		Summary temp;
		for (Text value : values) {
			String str = value.toString();
			int index = str.indexOf(',');
			int dls = Integer.parseInt(str.substring(index + 1));
			counter += 1;
			downloadSize += (dls);
		}
		temp = new Summary(new IntWritable(counter), new IntWritable(downloadSize));
		context.write(key, new Text(temp.toString()));
	}
}